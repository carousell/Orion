// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServiceName.proto

package ServiceName_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestStreamInterceptorRequest struct {
	ShouldReturnError    bool     `protobuf:"varint,1,opt,name=should_return_error,json=shouldReturnError,proto3" json:"should_return_error,omitempty"`
	SleepMs              int64    `protobuf:"varint,2,opt,name=sleep_ms,json=sleepMs,proto3" json:"sleep_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestStreamInterceptorRequest) Reset()         { *m = TestStreamInterceptorRequest{} }
func (m *TestStreamInterceptorRequest) String() string { return proto.CompactTextString(m) }
func (*TestStreamInterceptorRequest) ProtoMessage()    {}
func (*TestStreamInterceptorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{0}
}

func (m *TestStreamInterceptorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestStreamInterceptorRequest.Unmarshal(m, b)
}
func (m *TestStreamInterceptorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestStreamInterceptorRequest.Marshal(b, m, deterministic)
}
func (m *TestStreamInterceptorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStreamInterceptorRequest.Merge(m, src)
}
func (m *TestStreamInterceptorRequest) XXX_Size() int {
	return xxx_messageInfo_TestStreamInterceptorRequest.Size(m)
}
func (m *TestStreamInterceptorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStreamInterceptorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestStreamInterceptorRequest proto.InternalMessageInfo

func (m *TestStreamInterceptorRequest) GetShouldReturnError() bool {
	if m != nil {
		return m.ShouldReturnError
	}
	return false
}

func (m *TestStreamInterceptorRequest) GetSleepMs() int64 {
	if m != nil {
		return m.SleepMs
	}
	return 0
}

type TestStreamInterceptorResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestStreamInterceptorResponse) Reset()         { *m = TestStreamInterceptorResponse{} }
func (m *TestStreamInterceptorResponse) String() string { return proto.CompactTextString(m) }
func (*TestStreamInterceptorResponse) ProtoMessage()    {}
func (*TestStreamInterceptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{1}
}

func (m *TestStreamInterceptorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestStreamInterceptorResponse.Unmarshal(m, b)
}
func (m *TestStreamInterceptorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestStreamInterceptorResponse.Marshal(b, m, deterministic)
}
func (m *TestStreamInterceptorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStreamInterceptorResponse.Merge(m, src)
}
func (m *TestStreamInterceptorResponse) XXX_Size() int {
	return xxx_messageInfo_TestStreamInterceptorResponse.Size(m)
}
func (m *TestStreamInterceptorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStreamInterceptorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestStreamInterceptorResponse proto.InternalMessageInfo

func (m *TestStreamInterceptorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type EchoRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{2}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{3}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UpperRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperRequest) Reset()         { *m = UpperRequest{} }
func (m *UpperRequest) String() string { return proto.CompactTextString(m) }
func (*UpperRequest) ProtoMessage()    {}
func (*UpperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{4}
}

func (m *UpperRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperRequest.Unmarshal(m, b)
}
func (m *UpperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperRequest.Marshal(b, m, deterministic)
}
func (m *UpperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperRequest.Merge(m, src)
}
func (m *UpperRequest) XXX_Size() int {
	return xxx_messageInfo_UpperRequest.Size(m)
}
func (m *UpperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpperRequest proto.InternalMessageInfo

func (m *UpperRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UpperResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperResponse) Reset()         { *m = UpperResponse{} }
func (m *UpperResponse) String() string { return proto.CompactTextString(m) }
func (*UpperResponse) ProtoMessage()    {}
func (*UpperResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc2cd09af918402, []int{5}
}

func (m *UpperResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperResponse.Unmarshal(m, b)
}
func (m *UpperResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperResponse.Marshal(b, m, deterministic)
}
func (m *UpperResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperResponse.Merge(m, src)
}
func (m *UpperResponse) XXX_Size() int {
	return xxx_messageInfo_UpperResponse.Size(m)
}
func (m *UpperResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpperResponse proto.InternalMessageInfo

func (m *UpperResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*TestStreamInterceptorRequest)(nil), "ServiceName_proto.TestStreamInterceptorRequest")
	proto.RegisterType((*TestStreamInterceptorResponse)(nil), "ServiceName_proto.TestStreamInterceptorResponse")
	proto.RegisterType((*EchoRequest)(nil), "ServiceName_proto.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "ServiceName_proto.EchoResponse")
	proto.RegisterType((*UpperRequest)(nil), "ServiceName_proto.UpperRequest")
	proto.RegisterType((*UpperResponse)(nil), "ServiceName_proto.UpperResponse")
}

func init() { proto.RegisterFile("ServiceName.proto", fileDescriptor_8bc2cd09af918402) }

var fileDescriptor_8bc2cd09af918402 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xab, 0xb6, 0x4e, 0x15, 0xec, 0x8a, 0x50, 0x83, 0xda, 0x98, 0x53, 0x4e, 0x51,
	0xf4, 0xe4, 0x0f, 0xe8, 0xa1, 0xa0, 0xa2, 0xa9, 0x9e, 0x43, 0x8d, 0x83, 0x2d, 0x34, 0xd9, 0x75,
	0x66, 0x23, 0x7a, 0xf1, 0x7f, 0x7b, 0x93, 0x6c, 0x12, 0x09, 0x98, 0x15, 0x0f, 0xde, 0x32, 0xf3,
	0xbe, 0x79, 0x6f, 0x98, 0x2c, 0x0c, 0x67, 0x48, 0xaf, 0xcb, 0x04, 0x6f, 0xe6, 0x29, 0x86, 0x8a,
	0xa4, 0x96, 0xa2, 0xd9, 0x8a, 0x4d, 0xcb, 0x5f, 0xc2, 0xe1, 0x3d, 0xb2, 0x9e, 0x69, 0xc2, 0x79,
	0x3a, 0xcd, 0x34, 0x52, 0x82, 0x4a, 0x4b, 0x8a, 0xf0, 0x25, 0x47, 0xd6, 0x22, 0x84, 0x3d, 0x5e,
	0xc8, 0x7c, 0xf5, 0x14, 0x13, 0xea, 0x9c, 0xb2, 0x18, 0x89, 0x24, 0x8d, 0x1c, 0xcf, 0x09, 0xfa,
	0xd1, 0xb0, 0x94, 0x22, 0xa3, 0x4c, 0x0a, 0x41, 0x1c, 0x40, 0x9f, 0x57, 0x88, 0x2a, 0x4e, 0x79,
	0xd4, 0xf1, 0x9c, 0xa0, 0x1b, 0xf5, 0x4c, 0x7d, 0xcd, 0xfe, 0x25, 0x1c, 0x59, 0xa2, 0x58, 0xc9,
	0x8c, 0x51, 0x8c, 0xa0, 0xc7, 0x79, 0x92, 0x20, 0x73, 0xe5, 0x5f, 0x97, 0xfe, 0x18, 0x06, 0x93,
	0x64, 0x21, 0xeb, 0xa5, 0x76, 0xa1, 0x9b, 0xf2, 0xb3, 0x81, 0xb6, 0xa2, 0xe2, 0xd3, 0xf7, 0x60,
	0xbb, 0x04, 0x2a, 0xab, 0x56, 0xe2, 0x41, 0x29, 0x24, 0xbb, 0xc7, 0x09, 0xec, 0x54, 0x84, 0xcd,
	0xe4, 0xfc, 0xb3, 0x03, 0x83, 0xc6, 0x0d, 0xc5, 0x14, 0xd6, 0x8b, 0x58, 0x71, 0x1c, 0xfe, 0xb8,
	0x6c, 0xd8, 0x58, 0xd8, 0x1d, 0x5b, 0xf5, 0x32, 0xca, 0x5f, 0x13, 0x57, 0xb0, 0x61, 0xd2, 0x45,
	0x1b, 0xdb, 0xdc, 0xdc, 0xf5, 0xec, 0xc0, 0xb7, 0xdb, 0x1d, 0x80, 0x69, 0xdd, 0x92, 0x7c, 0x7b,
	0xff, 0x1f, 0xcb, 0x0f, 0xd8, 0x6f, 0xfd, 0x7d, 0xe2, 0xb4, 0x65, 0xf8, 0xb7, 0x37, 0xe5, 0x9e,
	0xfd, 0x7d, 0xa0, 0x4e, 0x0f, 0x9c, 0xc7, 0x4d, 0x03, 0x5e, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x30, 0x36, 0x17, 0x38, 0xd8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceNameClient is the client API for ServiceName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceNameClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// ORION:URL: GET/POST/OPTIONS /api/1.0/upper/{msg}
	Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error)
	// ORION:URL: POST/PUT
	UpperProxy(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error)
	TestStreamInterceptor(ctx context.Context, opts ...grpc.CallOption) (ServiceName_TestStreamInterceptorClient, error)
}

type serviceNameClient struct {
	cc *grpc.ClientConn
}

func NewServiceNameClient(cc *grpc.ClientConn) ServiceNameClient {
	return &serviceNameClient{cc}
}

func (c *serviceNameClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/ServiceName_proto.ServiceName/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error) {
	out := new(UpperResponse)
	err := c.cc.Invoke(ctx, "/ServiceName_proto.ServiceName/Upper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) UpperProxy(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error) {
	out := new(UpperResponse)
	err := c.cc.Invoke(ctx, "/ServiceName_proto.ServiceName/UpperProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) TestStreamInterceptor(ctx context.Context, opts ...grpc.CallOption) (ServiceName_TestStreamInterceptorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceName_serviceDesc.Streams[0], "/ServiceName_proto.ServiceName/TestStreamInterceptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceNameTestStreamInterceptorClient{stream}
	return x, nil
}

type ServiceName_TestStreamInterceptorClient interface {
	Send(*TestStreamInterceptorRequest) error
	CloseAndRecv() (*TestStreamInterceptorResponse, error)
	grpc.ClientStream
}

type serviceNameTestStreamInterceptorClient struct {
	grpc.ClientStream
}

func (x *serviceNameTestStreamInterceptorClient) Send(m *TestStreamInterceptorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceNameTestStreamInterceptorClient) CloseAndRecv() (*TestStreamInterceptorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestStreamInterceptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceNameServer is the server API for ServiceName service.
type ServiceNameServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// ORION:URL: GET/POST/OPTIONS /api/1.0/upper/{msg}
	Upper(context.Context, *UpperRequest) (*UpperResponse, error)
	// ORION:URL: POST/PUT
	UpperProxy(context.Context, *UpperRequest) (*UpperResponse, error)
	TestStreamInterceptor(ServiceName_TestStreamInterceptorServer) error
}

func RegisterServiceNameServer(s *grpc.Server, srv ServiceNameServer) {
	s.RegisterService(&_ServiceName_serviceDesc, srv)
}

func _ServiceName_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_Upper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Upper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/Upper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Upper(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_UpperProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).UpperProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/UpperProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).UpperProxy(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_TestStreamInterceptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceNameServer).TestStreamInterceptor(&serviceNameTestStreamInterceptorServer{stream})
}

type ServiceName_TestStreamInterceptorServer interface {
	SendAndClose(*TestStreamInterceptorResponse) error
	Recv() (*TestStreamInterceptorRequest, error)
	grpc.ServerStream
}

type serviceNameTestStreamInterceptorServer struct {
	grpc.ServerStream
}

func (x *serviceNameTestStreamInterceptorServer) SendAndClose(m *TestStreamInterceptorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceNameTestStreamInterceptorServer) Recv() (*TestStreamInterceptorRequest, error) {
	m := new(TestStreamInterceptorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceName_proto.ServiceName",
	HandlerType: (*ServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ServiceName_Echo_Handler,
		},
		{
			MethodName: "Upper",
			Handler:    _ServiceName_Upper_Handler,
		},
		{
			MethodName: "UpperProxy",
			Handler:    _ServiceName_UpperProxy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStreamInterceptor",
			Handler:       _ServiceName_TestStreamInterceptor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ServiceName.proto",
}
