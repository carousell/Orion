// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServiceName.proto

/*
Package ServiceName_proto is a generated protocol buffer package.

It is generated from these files:
	ServiceName.proto

It has these top-level messages:
	EchoRequest
	EchoResponse
	UpperRequest
	UpperResponse
*/
package ServiceName_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoResponse struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UpperRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *UpperRequest) Reset()                    { *m = UpperRequest{} }
func (m *UpperRequest) String() string            { return proto.CompactTextString(m) }
func (*UpperRequest) ProtoMessage()               {}
func (*UpperRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpperRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UpperResponse struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *UpperResponse) Reset()                    { *m = UpperResponse{} }
func (m *UpperResponse) String() string            { return proto.CompactTextString(m) }
func (*UpperResponse) ProtoMessage()               {}
func (*UpperResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpperResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "ServiceName_proto.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "ServiceName_proto.EchoResponse")
	proto.RegisterType((*UpperRequest)(nil), "ServiceName_proto.UpperRequest")
	proto.RegisterType((*UpperResponse)(nil), "ServiceName_proto.UpperResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceName service

type ServiceNameClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// ORION:URL: GET/POST/OPTIONS /api/1.0/upper/{msg}
	Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error)
	// ORION:URL: POST/PUT
	UpperProxy(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error)
}

type serviceNameClient struct {
	cc *grpc.ClientConn
}

func NewServiceNameClient(cc *grpc.ClientConn) ServiceNameClient {
	return &serviceNameClient{cc}
}

func (c *serviceNameClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceName/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error) {
	out := new(UpperResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceName/Upper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) UpperProxy(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error) {
	out := new(UpperResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceName/UpperProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceName service

type ServiceNameServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// ORION:URL: GET/POST/OPTIONS /api/1.0/upper/{msg}
	Upper(context.Context, *UpperRequest) (*UpperResponse, error)
	// ORION:URL: POST/PUT
	UpperProxy(context.Context, *UpperRequest) (*UpperResponse, error)
}

func RegisterServiceNameServer(s *grpc.Server, srv ServiceNameServer) {
	s.RegisterService(&_ServiceName_serviceDesc, srv)

}

func _ServiceName_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_Upper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Upper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/Upper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Upper(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_UpperProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).UpperProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceName/UpperProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).UpperProxy(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceName_proto.ServiceName",
	HandlerType: (*ServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ServiceName_Echo_Handler,
		},
		{
			MethodName: "Upper",
			Handler:    _ServiceName_Upper_Handler,
		},
		{
			MethodName: "UpperProxy",
			Handler:    _ServiceName_UpperProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceName.proto",
}

func init() { proto.RegisterFile("ServiceName.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0c, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xf5, 0x4b, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x42, 0x16,
	0x8a, 0x07, 0x0b, 0x29, 0xc9, 0x73, 0x71, 0xbb, 0x26, 0x67, 0xe4, 0x07, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x81, 0x98, 0x4a, 0x0a, 0x5c, 0x3c, 0x10, 0x05, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xd8, 0x55,
	0x84, 0x16, 0x14, 0xa4, 0x16, 0xe1, 0x36, 0x43, 0x91, 0x8b, 0x17, 0xaa, 0x02, 0x97, 0x21, 0x46,
	0x3f, 0x19, 0xb9, 0xb8, 0x91, 0x5c, 0x27, 0xe4, 0xc9, 0xc5, 0x02, 0xb2, 0x56, 0x48, 0x4e, 0x0f,
	0xc3, 0xcd, 0x7a, 0x48, 0x0e, 0x96, 0x92, 0xc7, 0x29, 0x0f, 0xb1, 0x4a, 0x89, 0x41, 0xc8, 0x87,
	0x8b, 0x15, 0x6c, 0xbb, 0x10, 0x36, 0xb5, 0xc8, 0x2e, 0x97, 0x52, 0xc0, 0xad, 0x00, 0x6e, 0x5a,
	0x20, 0x17, 0x17, 0x58, 0x28, 0xa0, 0x28, 0xbf, 0xa2, 0x92, 0x2a, 0x46, 0x26, 0xb1, 0x81, 0x85,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xf5, 0xb0, 0x36, 0xb2, 0x01, 0x00, 0x00,
}
