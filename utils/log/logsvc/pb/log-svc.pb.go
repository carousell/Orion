// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: log-svc.proto

package logsvc_proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogLevel int32

const (
	LogLevel_PANIC   LogLevel = 0
	LogLevel_ERROR   LogLevel = 1
	LogLevel_WARNING LogLevel = 2
	LogLevel_INFO    LogLevel = 3
	LogLevel_DEBUG   LogLevel = 4
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "PANIC",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
		4: "DEBUG",
	}
	LogLevel_value = map[string]int32{
		"PANIC":   0,
		"ERROR":   1,
		"WARNING": 2,
		"INFO":    3,
		"DEBUG":   4,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_log_svc_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_log_svc_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{0}
}

type ConfigUpstream_Type int32

const (
	ConfigUpstream_HEALTH_CHECK ConfigUpstream_Type = 0
	ConfigUpstream_REGISTER     ConfigUpstream_Type = 1
)

// Enum value maps for ConfigUpstream_Type.
var (
	ConfigUpstream_Type_name = map[int32]string{
		0: "HEALTH_CHECK",
		1: "REGISTER",
	}
	ConfigUpstream_Type_value = map[string]int32{
		"HEALTH_CHECK": 0,
		"REGISTER":     1,
	}
)

func (x ConfigUpstream_Type) Enum() *ConfigUpstream_Type {
	p := new(ConfigUpstream_Type)
	*p = x
	return p
}

func (x ConfigUpstream_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigUpstream_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_log_svc_proto_enumTypes[1].Descriptor()
}

func (ConfigUpstream_Type) Type() protoreflect.EnumType {
	return &file_log_svc_proto_enumTypes[1]
}

func (x ConfigUpstream_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigUpstream_Type.Descriptor instead.
func (ConfigUpstream_Type) EnumDescriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{2, 0}
}

type ConfigDownstream_Type int32

const (
	ConfigDownstream_HEALTH_CHECK ConfigDownstream_Type = 0
	ConfigDownstream_CONFIG       ConfigDownstream_Type = 1
)

// Enum value maps for ConfigDownstream_Type.
var (
	ConfigDownstream_Type_name = map[int32]string{
		0: "HEALTH_CHECK",
		1: "CONFIG",
	}
	ConfigDownstream_Type_value = map[string]int32{
		"HEALTH_CHECK": 0,
		"CONFIG":       1,
	}
)

func (x ConfigDownstream_Type) Enum() *ConfigDownstream_Type {
	p := new(ConfigDownstream_Type)
	*p = x
	return p
}

func (x ConfigDownstream_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigDownstream_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_log_svc_proto_enumTypes[2].Descriptor()
}

func (ConfigDownstream_Type) Type() protoreflect.EnumType {
	return &file_log_svc_proto_enumTypes[2]
}

func (x ConfigDownstream_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigDownstream_Type.Descriptor instead.
func (ConfigDownstream_Type) EnumDescriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{3, 0}
}

type LogPushResponse_Status int32

const (
	LogPushResponse_SUCCESS LogPushResponse_Status = 0
	LogPushResponse_ERROR   LogPushResponse_Status = 1
)

// Enum value maps for LogPushResponse_Status.
var (
	LogPushResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
	}
	LogPushResponse_Status_value = map[string]int32{
		"SUCCESS": 0,
		"ERROR":   1,
	}
)

func (x LogPushResponse_Status) Enum() *LogPushResponse_Status {
	p := new(LogPushResponse_Status)
	*p = x
	return p
}

func (x LogPushResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogPushResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_log_svc_proto_enumTypes[3].Descriptor()
}

func (LogPushResponse_Status) Type() protoreflect.EnumType {
	return &file_log_svc_proto_enumTypes[3]
}

func (x LogPushResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogPushResponse_Status.Descriptor instead.
func (LogPushResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{8, 0}
}

type UpdateConfigResponse_Status int32

const (
	UpdateConfigResponse_SUCCESS UpdateConfigResponse_Status = 0
	UpdateConfigResponse_ERROR   UpdateConfigResponse_Status = 1
)

// Enum value maps for UpdateConfigResponse_Status.
var (
	UpdateConfigResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
	}
	UpdateConfigResponse_Status_value = map[string]int32{
		"SUCCESS": 0,
		"ERROR":   1,
	}
)

func (x UpdateConfigResponse_Status) Enum() *UpdateConfigResponse_Status {
	p := new(UpdateConfigResponse_Status)
	*p = x
	return p
}

func (x UpdateConfigResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateConfigResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_log_svc_proto_enumTypes[4].Descriptor()
}

func (UpdateConfigResponse_Status) Type() protoreflect.EnumType {
	return &file_log_svc_proto_enumTypes[4]
}

func (x UpdateConfigResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateConfigResponse_Status.Descriptor instead.
func (UpdateConfigResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{11, 0}
}

type LoggerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region"`
	InstanceId  string `protobuf:"bytes,4,opt,name=instanceId,proto3" json:"instanceId"`
}

func (x *LoggerMeta) Reset() {
	*x = LoggerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerMeta) ProtoMessage() {}

func (x *LoggerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerMeta.ProtoReflect.Descriptor instead.
func (*LoggerMeta) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{0}
}

func (x *LoggerMeta) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *LoggerMeta) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *LoggerMeta) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LoggerMeta) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=logsvc_proto.LogLevel" json:"level"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{1}
}

func (x *LogConfig) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_PANIC
}

type ConfigUpstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ConfigUpstream_Type `protobuf:"varint,1,opt,name=type,proto3,enum=logsvc_proto.ConfigUpstream_Type" json:"type"`
	HealthCheck     *ConfigHealthcheck  `protobuf:"bytes,2,opt,name=health_check,json=healthCheck,proto3" json:"health_check"`
	RegisterRequest *LoggerMeta         `protobuf:"bytes,3,opt,name=register_request,json=registerRequest,proto3" json:"register_request"`
}

func (x *ConfigUpstream) Reset() {
	*x = ConfigUpstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpstream) ProtoMessage() {}

func (x *ConfigUpstream) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpstream.ProtoReflect.Descriptor instead.
func (*ConfigUpstream) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigUpstream) GetType() ConfigUpstream_Type {
	if x != nil {
		return x.Type
	}
	return ConfigUpstream_HEALTH_CHECK
}

func (x *ConfigUpstream) GetHealthCheck() *ConfigHealthcheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *ConfigUpstream) GetRegisterRequest() *LoggerMeta {
	if x != nil {
		return x.RegisterRequest
	}
	return nil
}

type ConfigDownstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ConfigDownstream_Type `protobuf:"varint,1,opt,name=type,proto3,enum=logsvc_proto.ConfigDownstream_Type" json:"type"`
	HealthCheck *ConfigHealthcheck    `protobuf:"bytes,2,opt,name=health_check,json=healthCheck,proto3" json:"health_check"`
	Config      *LogConfig            `protobuf:"bytes,3,opt,name=config,proto3" json:"config"`
}

func (x *ConfigDownstream) Reset() {
	*x = ConfigDownstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDownstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDownstream) ProtoMessage() {}

func (x *ConfigDownstream) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDownstream.ProtoReflect.Descriptor instead.
func (*ConfigDownstream) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigDownstream) GetType() ConfigDownstream_Type {
	if x != nil {
		return x.Type
	}
	return ConfigDownstream_HEALTH_CHECK
}

func (x *ConfigDownstream) GetHealthCheck() *ConfigHealthcheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *ConfigDownstream) GetConfig() *LogConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PushConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *LoggerMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
}

func (x *PushConfigRequest) Reset() {
	*x = PushConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConfigRequest) ProtoMessage() {}

func (x *PushConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConfigRequest.ProtoReflect.Descriptor instead.
func (*PushConfigRequest) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{4}
}

func (x *PushConfigRequest) GetMeta() *LoggerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type BatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchTimeoutMs uint64 `protobuf:"varint,1,opt,name=batch_timeout_ms,json=batchTimeoutMs,proto3" json:"batch_timeout_ms"`
	BatchSizeBytes uint64 `protobuf:"varint,2,opt,name=batch_size_bytes,json=batchSizeBytes,proto3" json:"batch_size_bytes"`
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfig.ProtoReflect.Descriptor instead.
func (*BatchConfig) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{5}
}

func (x *BatchConfig) GetBatchTimeoutMs() uint64 {
	if x != nil {
		return x.BatchTimeoutMs
	}
	return 0
}

func (x *BatchConfig) GetBatchSizeBytes() uint64 {
	if x != nil {
		return x.BatchSizeBytes
	}
	return 0
}

type PushConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchConfig *BatchConfig `protobuf:"bytes,1,opt,name=batch_config,json=batchConfig,proto3" json:"batch_config"`
}

func (x *PushConfigResponse) Reset() {
	*x = PushConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConfigResponse) ProtoMessage() {}

func (x *PushConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConfigResponse.ProtoReflect.Descriptor instead.
func (*PushConfigResponse) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{6}
}

func (x *PushConfigResponse) GetBatchConfig() *BatchConfig {
	if x != nil {
		return x.BatchConfig
	}
	return nil
}

type LogPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *LoggerMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Log  []string    `protobuf:"bytes,2,rep,name=log,proto3" json:"log"`
}

func (x *LogPushRequest) Reset() {
	*x = LogPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPushRequest) ProtoMessage() {}

func (x *LogPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPushRequest.ProtoReflect.Descriptor instead.
func (*LogPushRequest) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{7}
}

func (x *LogPushRequest) GetMeta() *LoggerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LogPushRequest) GetLog() []string {
	if x != nil {
		return x.Log
	}
	return nil
}

type LogPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      LogPushResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=logsvc_proto.LogPushResponse_Status" json:"status"`
	BatchConfig *BatchConfig           `protobuf:"bytes,2,opt,name=batch_config,json=batchConfig,proto3" json:"batch_config"`
}

func (x *LogPushResponse) Reset() {
	*x = LogPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPushResponse) ProtoMessage() {}

func (x *LogPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPushResponse.ProtoReflect.Descriptor instead.
func (*LogPushResponse) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{8}
}

func (x *LogPushResponse) GetStatus() LogPushResponse_Status {
	if x != nil {
		return x.Status
	}
	return LogPushResponse_SUCCESS
}

func (x *LogPushResponse) GetBatchConfig() *BatchConfig {
	if x != nil {
		return x.BatchConfig
	}
	return nil
}

type ConfigHealthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping              string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping"`
	Interval          uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval"`
	RefreshConnection bool   `protobuf:"varint,3,opt,name=refresh_connection,json=refreshConnection,proto3" json:"refresh_connection"`
}

func (x *ConfigHealthcheck) Reset() {
	*x = ConfigHealthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigHealthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigHealthcheck) ProtoMessage() {}

func (x *ConfigHealthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigHealthcheck.ProtoReflect.Descriptor instead.
func (*ConfigHealthcheck) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigHealthcheck) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

func (x *ConfigHealthcheck) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ConfigHealthcheck) GetRefreshConnection() bool {
	if x != nil {
		return x.RefreshConnection
	}
	return false
}

type UpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta   *LoggerMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Config *LogConfig  `protobuf:"bytes,2,opt,name=config,proto3" json:"config"`
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateConfigRequest) GetMeta() *LoggerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateConfigRequest) GetConfig() *LogConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       UpdateConfigResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=logsvc_proto.UpdateConfigResponse_Status" json:"status"`
	ErrorMessage string                      `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message"`
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_log_svc_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateConfigResponse) GetStatus() UpdateConfigResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateConfigResponse_SUCCESS
}

func (x *UpdateConfigResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_log_svc_proto protoreflect.FileDescriptor

var file_log_svc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x2d, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0xe6,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0a,
	0x12, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x50, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x72, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xa0, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x2a, 0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x04, 0x32, 0xcd, 0x02, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x53, 0x76,
	0x63, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a,
	0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1c,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x6c, 0x6f, 0x67, 0x73,
	0x76, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_log_svc_proto_rawDescOnce sync.Once
	file_log_svc_proto_rawDescData = file_log_svc_proto_rawDesc
)

func file_log_svc_proto_rawDescGZIP() []byte {
	file_log_svc_proto_rawDescOnce.Do(func() {
		file_log_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_log_svc_proto_rawDescData)
	})
	return file_log_svc_proto_rawDescData
}

var file_log_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_log_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_log_svc_proto_goTypes = []interface{}{
	(LogLevel)(0),                    // 0: logsvc_proto.LogLevel
	(ConfigUpstream_Type)(0),         // 1: logsvc_proto.ConfigUpstream.Type
	(ConfigDownstream_Type)(0),       // 2: logsvc_proto.ConfigDownstream.Type
	(LogPushResponse_Status)(0),      // 3: logsvc_proto.LogPushResponse.Status
	(UpdateConfigResponse_Status)(0), // 4: logsvc_proto.UpdateConfigResponse.Status
	(*LoggerMeta)(nil),               // 5: logsvc_proto.LoggerMeta
	(*LogConfig)(nil),                // 6: logsvc_proto.LogConfig
	(*ConfigUpstream)(nil),           // 7: logsvc_proto.ConfigUpstream
	(*ConfigDownstream)(nil),         // 8: logsvc_proto.ConfigDownstream
	(*PushConfigRequest)(nil),        // 9: logsvc_proto.PushConfigRequest
	(*BatchConfig)(nil),              // 10: logsvc_proto.BatchConfig
	(*PushConfigResponse)(nil),       // 11: logsvc_proto.PushConfigResponse
	(*LogPushRequest)(nil),           // 12: logsvc_proto.LogPushRequest
	(*LogPushResponse)(nil),          // 13: logsvc_proto.LogPushResponse
	(*ConfigHealthcheck)(nil),        // 14: logsvc_proto.ConfigHealthcheck
	(*UpdateConfigRequest)(nil),      // 15: logsvc_proto.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),     // 16: logsvc_proto.UpdateConfigResponse
}
var file_log_svc_proto_depIdxs = []int32{
	0,  // 0: logsvc_proto.LogConfig.level:type_name -> logsvc_proto.LogLevel
	1,  // 1: logsvc_proto.ConfigUpstream.type:type_name -> logsvc_proto.ConfigUpstream.Type
	14, // 2: logsvc_proto.ConfigUpstream.health_check:type_name -> logsvc_proto.ConfigHealthcheck
	5,  // 3: logsvc_proto.ConfigUpstream.register_request:type_name -> logsvc_proto.LoggerMeta
	2,  // 4: logsvc_proto.ConfigDownstream.type:type_name -> logsvc_proto.ConfigDownstream.Type
	14, // 5: logsvc_proto.ConfigDownstream.health_check:type_name -> logsvc_proto.ConfigHealthcheck
	6,  // 6: logsvc_proto.ConfigDownstream.config:type_name -> logsvc_proto.LogConfig
	5,  // 7: logsvc_proto.PushConfigRequest.meta:type_name -> logsvc_proto.LoggerMeta
	10, // 8: logsvc_proto.PushConfigResponse.batch_config:type_name -> logsvc_proto.BatchConfig
	5,  // 9: logsvc_proto.LogPushRequest.meta:type_name -> logsvc_proto.LoggerMeta
	3,  // 10: logsvc_proto.LogPushResponse.status:type_name -> logsvc_proto.LogPushResponse.Status
	10, // 11: logsvc_proto.LogPushResponse.batch_config:type_name -> logsvc_proto.BatchConfig
	5,  // 12: logsvc_proto.UpdateConfigRequest.meta:type_name -> logsvc_proto.LoggerMeta
	6,  // 13: logsvc_proto.UpdateConfigRequest.config:type_name -> logsvc_proto.LogConfig
	4,  // 14: logsvc_proto.UpdateConfigResponse.status:type_name -> logsvc_proto.UpdateConfigResponse.Status
	7,  // 15: logsvc_proto.LogSvc.ConfigStream:input_type -> logsvc_proto.ConfigUpstream
	12, // 16: logsvc_proto.LogSvc.LogPush:input_type -> logsvc_proto.LogPushRequest
	9,  // 17: logsvc_proto.LogSvc.GetPushConfig:input_type -> logsvc_proto.PushConfigRequest
	15, // 18: logsvc_proto.LogSvc.UpdateConfig:input_type -> logsvc_proto.UpdateConfigRequest
	8,  // 19: logsvc_proto.LogSvc.ConfigStream:output_type -> logsvc_proto.ConfigDownstream
	13, // 20: logsvc_proto.LogSvc.LogPush:output_type -> logsvc_proto.LogPushResponse
	11, // 21: logsvc_proto.LogSvc.GetPushConfig:output_type -> logsvc_proto.PushConfigResponse
	16, // 22: logsvc_proto.LogSvc.UpdateConfig:output_type -> logsvc_proto.UpdateConfigResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_log_svc_proto_init() }
func file_log_svc_proto_init() {
	if File_log_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_log_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDownstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigHealthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_log_svc_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_log_svc_proto_goTypes,
		DependencyIndexes: file_log_svc_proto_depIdxs,
		EnumInfos:         file_log_svc_proto_enumTypes,
		MessageInfos:      file_log_svc_proto_msgTypes,
	}.Build()
	File_log_svc_proto = out.File
	file_log_svc_proto_rawDesc = nil
	file_log_svc_proto_goTypes = nil
	file_log_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogSvcClient is the client API for LogSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogSvcClient interface {
	// Bidirectional stream between all service instances and log-svc
	// For pushing real time updates to log config
	ConfigStream(ctx context.Context, opts ...grpc.CallOption) (LogSvc_ConfigStreamClient, error)
	// RPC for pushing batches of logs to log-svc. Called by log agents on every node
	LogPush(ctx context.Context, in *LogPushRequest, opts ...grpc.CallOption) (*LogPushResponse, error)
	// Fetch push config (batch size, timeout etc). Called by log agents on all nodes
	GetPushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*PushConfigResponse, error)
	// Log config update. API to control log parameters per service
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
}

type logSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewLogSvcClient(cc grpc.ClientConnInterface) LogSvcClient {
	return &logSvcClient{cc}
}

func (c *logSvcClient) ConfigStream(ctx context.Context, opts ...grpc.CallOption) (LogSvc_ConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogSvc_serviceDesc.Streams[0], "/logsvc_proto.LogSvc/ConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logSvcConfigStreamClient{stream}
	return x, nil
}

type LogSvc_ConfigStreamClient interface {
	Send(*ConfigUpstream) error
	Recv() (*ConfigDownstream, error)
	grpc.ClientStream
}

type logSvcConfigStreamClient struct {
	grpc.ClientStream
}

func (x *logSvcConfigStreamClient) Send(m *ConfigUpstream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logSvcConfigStreamClient) Recv() (*ConfigDownstream, error) {
	m := new(ConfigDownstream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logSvcClient) LogPush(ctx context.Context, in *LogPushRequest, opts ...grpc.CallOption) (*LogPushResponse, error) {
	out := new(LogPushResponse)
	err := c.cc.Invoke(ctx, "/logsvc_proto.LogSvc/LogPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logSvcClient) GetPushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*PushConfigResponse, error) {
	out := new(PushConfigResponse)
	err := c.cc.Invoke(ctx, "/logsvc_proto.LogSvc/GetPushConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logSvcClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, "/logsvc_proto.LogSvc/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogSvcServer is the server API for LogSvc service.
type LogSvcServer interface {
	// Bidirectional stream between all service instances and log-svc
	// For pushing real time updates to log config
	ConfigStream(LogSvc_ConfigStreamServer) error
	// RPC for pushing batches of logs to log-svc. Called by log agents on every node
	LogPush(context.Context, *LogPushRequest) (*LogPushResponse, error)
	// Fetch push config (batch size, timeout etc). Called by log agents on all nodes
	GetPushConfig(context.Context, *PushConfigRequest) (*PushConfigResponse, error)
	// Log config update. API to control log parameters per service
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
}

// UnimplementedLogSvcServer can be embedded to have forward compatible implementations.
type UnimplementedLogSvcServer struct {
}

func (*UnimplementedLogSvcServer) ConfigStream(LogSvc_ConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigStream not implemented")
}
func (*UnimplementedLogSvcServer) LogPush(context.Context, *LogPushRequest) (*LogPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogPush not implemented")
}
func (*UnimplementedLogSvcServer) GetPushConfig(context.Context, *PushConfigRequest) (*PushConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushConfig not implemented")
}
func (*UnimplementedLogSvcServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}

func RegisterLogSvcServer(s *grpc.Server, srv LogSvcServer) {
	s.RegisterService(&_LogSvc_serviceDesc, srv)
}

func _LogSvc_ConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogSvcServer).ConfigStream(&logSvcConfigStreamServer{stream})
}

type LogSvc_ConfigStreamServer interface {
	Send(*ConfigDownstream) error
	Recv() (*ConfigUpstream, error)
	grpc.ServerStream
}

type logSvcConfigStreamServer struct {
	grpc.ServerStream
}

func (x *logSvcConfigStreamServer) Send(m *ConfigDownstream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logSvcConfigStreamServer) Recv() (*ConfigUpstream, error) {
	m := new(ConfigUpstream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogSvc_LogPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogSvcServer).LogPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logsvc_proto.LogSvc/LogPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogSvcServer).LogPush(ctx, req.(*LogPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogSvc_GetPushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogSvcServer).GetPushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logsvc_proto.LogSvc/GetPushConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogSvcServer).GetPushConfig(ctx, req.(*PushConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogSvc_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogSvcServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logsvc_proto.LogSvc/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogSvcServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logsvc_proto.LogSvc",
	HandlerType: (*LogSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogPush",
			Handler:    _LogSvc_LogPush_Handler,
		},
		{
			MethodName: "GetPushConfig",
			Handler:    _LogSvc_GetPushConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _LogSvc_UpdateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConfigStream",
			Handler:       _LogSvc_ConfigStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "log-svc.proto",
}
