// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServiceName.proto

/*
Package ServiceName_proto is a generated protocol buffer package.

It is generated from these files:
	ServiceName.proto

It has these top-level messages:
	EchoRequest
	EchoResponse
	UppercaseRequest
	UppercaseResponse
	SearchCommentsResponse
	SearchCommentsRequest
	AddCommentRequest
	AddCommentResponse
	GetCommentRequest
	GetCommentResponse
*/
package ServiceName_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoResponse struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UppercaseRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg"`
}

func (m *UppercaseRequest) Reset()                    { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()               {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UppercaseRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UppercaseResponse struct {
	Msg       string `protobuf:"bytes,1,opt,name=msg" json:"msg"`
	Uppercase string `protobuf:"bytes,2,opt,name=uppercase" json:"uppercase"`
}

func (m *UppercaseResponse) Reset()                    { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()               {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UppercaseResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UppercaseResponse) GetUppercase() string {
	if m != nil {
		return m.Uppercase
	}
	return ""
}

type SearchCommentsResponse struct {
	Comments []*SearchCommentsResponse_Comment `protobuf:"bytes,1,rep,name=comments" json:"comments"`
}

func (m *SearchCommentsResponse) Reset()                    { *m = SearchCommentsResponse{} }
func (m *SearchCommentsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchCommentsResponse) ProtoMessage()               {}
func (*SearchCommentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchCommentsResponse) GetComments() []*SearchCommentsResponse_Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type SearchCommentsResponse_Comment struct {
	UUID    string `protobuf:"bytes,1,opt,name=UUID" json:"UUID"`
	Comment string `protobuf:"bytes,2,opt,name=Comment" json:"Comment"`
}

func (m *SearchCommentsResponse_Comment) Reset()         { *m = SearchCommentsResponse_Comment{} }
func (m *SearchCommentsResponse_Comment) String() string { return proto.CompactTextString(m) }
func (*SearchCommentsResponse_Comment) ProtoMessage()    {}
func (*SearchCommentsResponse_Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

func (m *SearchCommentsResponse_Comment) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SearchCommentsResponse_Comment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type SearchCommentsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query"`
}

func (m *SearchCommentsRequest) Reset()                    { *m = SearchCommentsRequest{} }
func (m *SearchCommentsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchCommentsRequest) ProtoMessage()               {}
func (*SearchCommentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchCommentsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type AddCommentRequest struct {
	Comment string `protobuf:"bytes,1,opt,name=Comment" json:"Comment"`
}

func (m *AddCommentRequest) Reset()                    { *m = AddCommentRequest{} }
func (m *AddCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCommentRequest) ProtoMessage()               {}
func (*AddCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddCommentRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type AddCommentResponse struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID"`
}

func (m *AddCommentResponse) Reset()                    { *m = AddCommentResponse{} }
func (m *AddCommentResponse) String() string            { return proto.CompactTextString(m) }
func (*AddCommentResponse) ProtoMessage()               {}
func (*AddCommentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddCommentResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type GetCommentRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID"`
}

func (m *GetCommentRequest) Reset()                    { *m = GetCommentRequest{} }
func (m *GetCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCommentRequest) ProtoMessage()               {}
func (*GetCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetCommentRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type GetCommentResponse struct {
	UUID    string `protobuf:"bytes,1,opt,name=UUID" json:"UUID"`
	Comment string `protobuf:"bytes,2,opt,name=Comment" json:"Comment"`
}

func (m *GetCommentResponse) Reset()                    { *m = GetCommentResponse{} }
func (m *GetCommentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCommentResponse) ProtoMessage()               {}
func (*GetCommentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetCommentResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GetCommentResponse) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "ServiceName_proto.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "ServiceName_proto.EchoResponse")
	proto.RegisterType((*UppercaseRequest)(nil), "ServiceName_proto.UppercaseRequest")
	proto.RegisterType((*UppercaseResponse)(nil), "ServiceName_proto.UppercaseResponse")
	proto.RegisterType((*SearchCommentsResponse)(nil), "ServiceName_proto.SearchCommentsResponse")
	proto.RegisterType((*SearchCommentsResponse_Comment)(nil), "ServiceName_proto.SearchCommentsResponse.Comment")
	proto.RegisterType((*SearchCommentsRequest)(nil), "ServiceName_proto.SearchCommentsRequest")
	proto.RegisterType((*AddCommentRequest)(nil), "ServiceName_proto.AddCommentRequest")
	proto.RegisterType((*AddCommentResponse)(nil), "ServiceName_proto.AddCommentResponse")
	proto.RegisterType((*GetCommentRequest)(nil), "ServiceName_proto.GetCommentRequest")
	proto.RegisterType((*GetCommentResponse)(nil), "ServiceName_proto.GetCommentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceNameService service

type ServiceNameServiceClient interface {
	// Echo echos the request back
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Echo echos the request back
	Reverse(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Uppercase uppercases the msg provided in the request
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
	// search through all the messages
	SearchComments(ctx context.Context, in *SearchCommentsRequest, opts ...grpc.CallOption) (*SearchCommentsResponse, error)
	// Add a comment to system
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	// fetchs comment for the uuid
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
}

type serviceNameServiceClient struct {
	cc *grpc.ClientConn
}

func NewServiceNameServiceClient(cc *grpc.ClientConn) ServiceNameServiceClient {
	return &serviceNameServiceClient{cc}
}

func (c *serviceNameServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameServiceClient) Reverse(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/Reverse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameServiceClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/Uppercase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameServiceClient) SearchComments(ctx context.Context, in *SearchCommentsRequest, opts ...grpc.CallOption) (*SearchCommentsResponse, error) {
	out := new(SearchCommentsResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/SearchComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/AddComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := grpc.Invoke(ctx, "/ServiceName_proto.ServiceNameService/GetComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceNameService service

type ServiceNameServiceServer interface {
	// Echo echos the request back
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Echo echos the request back
	Reverse(context.Context, *EchoRequest) (*EchoResponse, error)
	// Uppercase uppercases the msg provided in the request
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
	// search through all the messages
	SearchComments(context.Context, *SearchCommentsRequest) (*SearchCommentsResponse, error)
	// Add a comment to system
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	// fetchs comment for the uuid
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
}

func RegisterServiceNameServiceServer(s *grpc.Server, srv ServiceNameServiceServer) {
	s.RegisterService(&_ServiceNameService_serviceDesc, srv)

}

func _ServiceNameService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceNameService_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/Reverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).Reverse(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceNameService_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceNameService_SearchComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).SearchComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/SearchComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).SearchComments(ctx, req.(*SearchCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceNameService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceNameService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceName_proto.ServiceNameService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceName_proto.ServiceNameService",
	HandlerType: (*ServiceNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ServiceNameService_Echo_Handler,
		},
		{
			MethodName: "Reverse",
			Handler:    _ServiceNameService_Reverse_Handler,
		},
		{
			MethodName: "Uppercase",
			Handler:    _ServiceNameService_Uppercase_Handler,
		},
		{
			MethodName: "SearchComments",
			Handler:    _ServiceNameService_SearchComments_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _ServiceNameService_AddComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _ServiceNameService_GetComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceName.proto",
}

func init() { proto.RegisterFile("ServiceName.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4f, 0xea, 0x40,
	0x10, 0xc6, 0xe9, 0x83, 0xf7, 0x78, 0x0c, 0xc6, 0xd0, 0x89, 0x9a, 0xa6, 0x31, 0x42, 0x56, 0x8c,
	0xf5, 0x40, 0x13, 0xf1, 0xe0, 0x59, 0xd1, 0x18, 0x12, 0xf5, 0x50, 0x42, 0x62, 0xe2, 0xc1, 0x60,
	0x99, 0x80, 0x87, 0xd2, 0xd2, 0x2d, 0x24, 0xfe, 0x37, 0x9e, 0xfd, 0x2b, 0x0d, 0xed, 0x52, 0x16,
	0xba, 0x55, 0x0e, 0xde, 0xb6, 0xdf, 0x7c, 0xfd, 0xcd, 0xcc, 0xee, 0x07, 0x7a, 0x8f, 0xc2, 0xf9,
	0x9b, 0x4b, 0x8f, 0x03, 0x8f, 0xec, 0x20, 0xf4, 0x23, 0x1f, 0x65, 0xe9, 0x25, 0x96, 0x58, 0x1d,
	0xaa, 0xb7, 0xee, 0xd8, 0x77, 0x68, 0x3a, 0x23, 0x1e, 0x61, 0x0d, 0x8a, 0x1e, 0x1f, 0x19, 0x5a,
	0x43, 0xb3, 0x2a, 0xce, 0xe2, 0xc8, 0x1a, 0xb0, 0x93, 0x18, 0x78, 0xe0, 0x4f, 0x38, 0x29, 0x1c,
	0x4d, 0xa8, 0xf5, 0x83, 0x80, 0x42, 0x77, 0xc0, 0x29, 0x9f, 0xd3, 0x01, 0x5d, 0x72, 0xe5, 0xc1,
	0xf0, 0x10, 0x2a, 0xb3, 0xa5, 0xcd, 0xf8, 0x13, 0xeb, 0x2b, 0x81, 0x7d, 0x68, 0x70, 0xd0, 0xa3,
	0x41, 0xe8, 0x8e, 0x3b, 0xbe, 0xe7, 0xd1, 0x24, 0xe2, 0x29, 0xea, 0x01, 0xfe, 0xbb, 0x42, 0x33,
	0xb4, 0x46, 0xd1, 0xaa, 0xb6, 0xcf, 0xed, 0xcc, 0xba, 0xb6, 0xfa, 0x67, 0x5b, 0x08, 0x4e, 0x8a,
	0x30, 0x2f, 0xa1, 0x2c, 0x44, 0x44, 0x28, 0xf5, 0xfb, 0xdd, 0x1b, 0x31, 0x65, 0x7c, 0x46, 0x23,
	0x2d, 0x8b, 0x21, 0x97, 0x9f, 0xac, 0x05, 0xfb, 0x9b, 0x4d, 0x92, 0x2b, 0xd9, 0x83, 0xbf, 0xd3,
	0x19, 0x85, 0xef, 0x82, 0x93, 0x7c, 0xb0, 0x16, 0xe8, 0x57, 0xc3, 0xe1, 0xb2, 0xbf, 0xb0, 0x4a,
	0x74, 0x6d, 0x9d, 0x6e, 0x01, 0xca, 0x76, 0xb1, 0xbb, 0x62, 0x42, 0x76, 0x0a, 0xfa, 0x1d, 0x45,
	0x1b, 0x60, 0x95, 0xf1, 0x1a, 0x50, 0x36, 0xe6, 0x23, 0xf3, 0x97, 0x6e, 0x7f, 0x96, 0x00, 0xa5,
	0xcb, 0x16, 0x47, 0xec, 0x42, 0x69, 0x91, 0x1d, 0x3c, 0x52, 0xbc, 0x84, 0x94, 0x3a, 0xb3, 0x9e,
	0x5b, 0x4f, 0xa6, 0x61, 0x05, 0xbc, 0x87, 0xb2, 0x43, 0x73, 0x0a, 0x39, 0xfd, 0x06, 0xed, 0x09,
	0x2a, 0x69, 0x18, 0xf1, 0x58, 0xe1, 0xdf, 0x0c, 0xb4, 0xd9, 0xfc, 0xde, 0x94, 0x92, 0x47, 0xb0,
	0xbb, 0xfe, 0xfc, 0x68, 0x6d, 0x11, 0xc3, 0xa4, 0xc7, 0xd9, 0xd6, 0x81, 0x65, 0x05, 0x7c, 0x06,
	0x58, 0x25, 0x01, 0x55, 0xe3, 0x65, 0x72, 0x65, 0x9e, 0xfc, 0xe0, 0x92, 0xe1, 0xab, 0x4c, 0x28,
	0xe1, 0x99, 0x6c, 0x29, 0xe1, 0xd9, 0x60, 0xb1, 0xc2, 0xeb, 0xbf, 0xb8, 0x76, 0xf1, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x26, 0x40, 0x68, 0xd7, 0xa1, 0x04, 0x00, 0x00,
}
